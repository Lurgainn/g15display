#!/usr/bin/env python3
# -*- coding: utf-8 *-*
#
# g15display
# Version: 0.1
# Date: 04 Sep. 2023
# Copyright: 2023 Lurgainn
#
# LICENSE:
#
# This file is part of g15display.
#
# g15display is free software: you can redistribute it and/or modify it under the terms of the
# GNU General Public License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# g15display is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with g15display.
# If not, see <https://www.gnu.org/licenses/>. 
#

# Imports
import os
import sys
import logging
from logging.handlers import RotatingFileHandler
import argparse
import json
import socket
import time

# Constants
PROGNAME = 'g15display'
VERSION = '0.1'
DEFAULT_CONFIG_FILE = '~/.config/uinput-macropad/config.json'
LOG_FILE_PATH = '~/.local/state/'
EMPTY_SCREEN_TITLE = '-----'
HOST = '127.0.0.1'
PORT_LCDd = 13666

def parse_arguments(log_file):

    # Create arguments parser
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,\
        description = PROGNAME + " ver." + VERSION + \
            "\n(standard path of 'uinput-cmacropad.py' config file is " + DEFAULT_CONFIG_FILE + ")" + \
            "\n(log path is " + log_file + ")",\
        epilog = "Copyright: 2023 Lurgainn\nLicensed under the terms of the GNU General Public License version 3")
    # Set the arguments
    parser.add_argument('-c', '--config-file', help = "Path to alternative config file")
    parser.add_argument('-v', '--verbose', action = 'store_true', help = "Enable verbose logging (default = False)")

    # Parse arguments
    args = parser.parse_args()
    return args


def create_logger(args):

    log = logging.getLogger(PROGNAME)
    # Set verbosity
    if args.verbose:
        log.setLevel(logging.DEBUG)
    else:
        log.setLevel(logging.WARNING)
    # Set log file's path
    log_file = os.path.expanduser(LOG_FILE_PATH)
    log_file = os.path.join(log_file, PROGNAME)
    if not os.path.isdir(log_file):
        os.makedirs(log_file)
    log_file = os.path.join(log_file, PROGNAME + '.log')
    # Max 3 files of ~1MB each
    handler = RotatingFileHandler(log_file, maxBytes=10**6, backupCount=3, encoding='utf-8')
    # Format of logging strings
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    log.addHandler(handler)
    return log

class LCD:
    # self.mkeys => screen titles
    # self.m1 => G keys associated with M1
    # self.m2 => G keys associated with M2
    # self.m3 => G keys associated with M3
    # self.mr => G keys associated with MR

    def __init__(self, log, args):
        # Initialize the class
        # Get the parameters
        self.log = log
        self.args = args
        # Set properties
        self.conf_ok = True
        self.connected = False
        self.s = None
        # Set default path to uinput-macropad config file
        self.config_file = os.path.expanduser(DEFAULT_CONFIG_FILE)
        # Set alternative path to config file
        if self.args.config_file is not None:
            self.config_file = self.args.config_file
            self.log.info(f"Loading config from: {self.config_file}")
        # Check if config file exists
        if os.path.isfile(self.config_file):
            self.load_json()
        else:
            self.conf_ok = False
            self.log.error(f"Config file '{self.config_file}' not found")
        return None
    
    def connect(self):
        # Open the socket to communicate with LCDd daemon
        try:
            self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.log.info("Socket successfully created")
            self.connected = True
        except socket.error as err:
            self.log.error("Socket creation failed with error %s" %(err))
            self.connected = False
        # Connect with LCDd daemon
        self.s.connect((HOST, PORT_LCDd))
        self.s.sendall("hello\n".encode())
        hello_answer = self.s.recv(1024)

        return None

    def disconnect(self):
        # Disconnect fro LCDd daemon and close the socket
        self.connected = False
        self.s.shutdown(socket.SHUT_RDWR)
        self.s.close()

        return None

    def load_json(self):
        # Load relevant data from uinput-macropad config file
        # Empty the variables
        self.mkeys = {'m1': EMPTY_SCREEN_TITLE, 'm2': EMPTY_SCREEN_TITLE, 'm3': EMPTY_SCREEN_TITLE, 'mr': EMPTY_SCREEN_TITLE}
        self.m1 = {'G1': "", 'G2': "", 'G3': "", 'G4': "", 'G5': "", 'G6': "", 'G7': "", 'G8': "", 'G9': "", \
            'G10': "", 'G11': "", 'G12': "", 'G13': "", 'G14': "", 'G15': "", 'G16': "", 'G17': "", 'G18': ""}
        self.m2 = {'G1': "", 'G2': "", 'G3': "", 'G4': "", 'G5': "", 'G6': "", 'G7': "", 'G8': "", 'G9': "", \
            'G10': "", 'G11': "", 'G12': "", 'G13': "", 'G14': "", 'G15': "", 'G16': "", 'G17': "", 'G18': ""}
        self.m3 = {'G1': "", 'G2': "", 'G3': "", 'G4': "", 'G5': "", 'G6': "", 'G7': "", 'G8': "", 'G9': "", \
            'G10': "", 'G11': "", 'G12': "", 'G13': "", 'G14': "", 'G15': "", 'G16': "", 'G17': "", 'G18': ""}
        self.mr = {'G1': "", 'G2': "", 'G3': "", 'G4': "", 'G5': "", 'G6': "", 'G7': "", 'G8': "", 'G9': "", \
            'G10': "", 'G11': "", 'G12': "", 'G13': "", 'G14': "", 'G15': "", 'G16': "", 'G17': "", 'G18': ""}
        # Try to load json data from config file
        try:
            f = open(self.config_file, 'r')
            self.json_data = json.loads(f.read())
            f.close()
        except:
            self.conf_ok = False
            self.log.error(f"Error loading config file '{self.config_file}'")
            return None
        # First get layers names to check if some are related to M1...MR keys
        for layer in self.json_data['layers']:
            self.log.debug("Layer (names): " + str(layer))
            # Get single layer data
            lay = {"name":None, "keys":None, "cmd": None}
            lay['name'] = layer[0]
            lay['keys'] = layer[1]
            if len(layer) == 3:
                lay['cmd'] = layer[2]
            else:
                lay['cmd'] = None
            # For each hotkey check if there's a M1...MR key
            for key in lay['keys']:
                # If match assign title to M1...MR key
                match key:
                    case 691:
                        self.mkeys['m1'] = lay['name']
                        self.log.debug("Found layer for M1 key: " + lay['name'])
                    case 692:
                        self.mkeys['m2'] = lay['name']
                        self.log.debug("Found layer for M2 key: " + lay['name'])
                    case 693:
                        self.mkeys['m3'] = lay['name']
                        self.log.debug("Found layer for M3 key: " + lay['name'])
                    case 688:
                        self.mkeys['mr'] = lay['name']
                        self.log.debug("Found layer for MR key: " + lay['name'])
        # Now load all macros
        macros = self.json_data['macros']
        # Check name of group of macros
        for macro in macros:
            self.log.debug("Macros (names): " + str(macros))
            # Uses macros group name to select the dictionary to load with single macro names
            if macro == self.mkeys.get('m1'):
                m = self.m1
            elif macro == self.mkeys.get('m2'):
                m = self.m2
            elif macro == self.mkeys.get('m3'):
                m = self.m3
            elif macro == self.mkeys.get('mr'):
                m = self.mr
            else:
                continue
            for macr in macros[macro]:
                mac = {"name":None, "keys":None, "type":None, "info":None}
                mac['name'] = macr[0]
                mac['keys'] = macr[1]
                mac['type'] = macr[2]
                mac['info'] = macr[3]
                # Load macro name if the hotkey is associated with a G1...G18 key
                for key in mac['keys']:
                    match key:
                        case 656:
                            m['G1'] = mac['name']
                            self.log.debug("Found macro for G1 key: " + mac['name'])
                        case 657:
                            m['G2'] = mac['name']
                            self.log.debug("Found macro for G2 key: " + mac['name'])
                        case 658:
                            m['G3'] = mac['name']
                            self.log.debug("Found macro for G3 key: " + mac['name'])
                        case 659:
                            m['G4'] = mac['name']
                            self.log.debug("Found macro for G4 key: " + mac['name'])
                        case 660:
                            m['G5'] = mac['name']
                            self.log.debug("Found macro for G5 key: " + mac['name'])
                        case 661:
                            m['G6'] = mac['name']
                            self.log.debug("Found macro for G6 key: " + mac['name'])
                        case 662:
                            m['G7'] = mac['name']
                            self.log.debug("Found macro for G7 key: " + mac['name'])
                        case 663:
                            m['G8'] = mac['name']
                            self.log.debug("Found macro for G8 key: " + mac['name'])
                        case 664:
                            m['G9'] = mac['name']
                            self.log.debug("Found macro for G9 key: " + mac['name'])
                        case 665:
                            m['G10'] = mac['name']
                            self.log.debug("Found macro for G10 key: " + mac['name'])
                        case 666:
                            m['G11'] = mac['name']
                            self.log.debug("Found macro for G11 key: " + mac['name'])
                        case 667:
                            m['G12'] = mac['name']
                            self.log.debug("Found macro for G12 key: " + mac['name'])
                        case 668:
                            m['G13'] = mac['name']
                            self.log.debug("Found macro for G13 key: " + mac['name'])
                        case 669:
                            m['G14'] = mac['name']
                            self.log.debug("Found macro for G14 key: " + mac['name'])
                        case 670:
                            m['G15'] = mac['name']
                            self.log.debug("Found macro for G15 key: " + mac['name'])
                        case 677:
                            m['G16'] = mac['name']
                            self.log.debug("Found macro for G16 key: " + mac['name'])
                        case 678:
                            m['G17'] = mac['name']
                            self.log.debug("Found macro for G17 key: " + mac['name'])
                        case 679:
                            m['G18'] = mac['name']
                            self.log.debug("Found macro for G18 key: " + mac['name'])

        return None

if __name__ == "__main__":
    # Set log file path
    log_file = os.path.expanduser(LOG_FILE_PATH)
    log_file = os.path.join(log_file, PROGNAME)
    # Parse program arguments
    prg_args = parse_arguments(log_file)
    # Create logger
    prg_log = create_logger(prg_args)
    prg_log.debug(f"Command line args: {prg_args}")
    # Create and initialize the clasas
    lcd = LCD(prg_log, prg_args)
    # If errors with config file exits
    if lcd.conf_ok == False:
        sys.exit(1)
    
    lcd.connect()
    if lcd.connected:
        prg_log.info('Connected to LCDd daemon')
        time.sleep(5)
        lcd.disconnect()
    else:
        prg_log,error('Error while connecting to LCDd daemon')
    sys.exit(0)
